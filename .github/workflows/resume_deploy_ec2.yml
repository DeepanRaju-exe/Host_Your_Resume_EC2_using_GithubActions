name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS credentials for Terraform
    - name: Configure AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
        echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentia

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        TF_VAR_username: ${{ secrets.TF_VAR_username }}
        TF_VAR_password: ${{ secrets.TF_VAR_password }}
      run: terraform apply -auto-approve -input=false

    # Get the public DNS of the EC2 instance
    - name: Get EC2 Public DNS
      id: get_dns
      run: echo "::set-output name=dns::$(terraform output -json public_dns | jq -r '.')"

    # SSH into the EC2 instance and deploy the application using username and password authentication
    - name: Executing remote SSH commands using username and password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ steps.get_dns.outputs.dns }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        script: |
          sudo apt-get -y update
          sudo apt-get install -y apache2
          sudo systemctl start apache2
          sudo systemctl enable apache2
          cd /home/${{ secrets.USERNAME }}
          sudo mv * /var/www/html